CREATE DATABASE coffee_SnM_db;
USE coffee_SnM_db;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  userName VARCHAR(255) UNIQUE NOT NULL,
  fullName VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  addressId INT,
  roleId INT,
  phoneNum VARCHAR(20) NOT NULL,
  avatarUrl VARCHAR(255),
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE roles (
  id INT AUTO_INCREMENT PRIMARY KEY,
  roleName ENUM('STAFF', 'CUSTOMER', 'ADMIN') NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE userRole (
  userId INT NOT NULL,
  roleId INT NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (userId, roleId),
  FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (roleId) REFERENCES roles(id) ON DELETE CASCADE
);

CREATE TABLE address (
  id INT AUTO_INCREMENT PRIMARY KEY,
  unitNum INT NOT NULL,
  streetNum INT NOT NULL,
  address_line VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  postalCode VARCHAR(50) NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE userAddress (
  userId INT NOT NULL,
  addressId INT NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (userId, addressId),
  FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (addressId) REFERENCES address(id) ON DELETE CASCADE
);

CREATE TABLE category (
  id INT AUTO_INCREMENT PRIMARY KEY,
  categoryName VARCHAR(255) NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE product (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  stockQuantity INT DEFAULT 0,
  imageUrl VARCHAR(255) NOT NULL,
  categoryId INT NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (categoryId) REFERENCES category(id) ON DELETE CASCADE
);

CREATE TABLE productDetail (
  id INT AUTO_INCREMENT PRIMARY KEY,
  productId INT NOT NULL,
  origin VARCHAR(255),
  roastLevel ENUM('Light', 'Medium', 'Dark'),
  flavorNotes TEXT,
  varietal VARCHAR(255),
  processingMethod VARCHAR(255),
  grindOptions VARCHAR(255),
  basicUser BOOLEAN DEFAULT FALSE,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (productId) REFERENCES product(id) ON DELETE CASCADE
);

CREATE TABLE orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  userId INT NOT NULL,
  orderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  totalAmount DECIMAL(12,2) DEFAULT 0.00,
  status ENUM('Pending', 'Processing', 'Shipped', 'Completed', 'Cancelled') DEFAULT 'Pending',
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE orderItem (
  id INT AUTO_INCREMENT PRIMARY KEY,
  orderId INT NOT NULL,
  productId INT NOT NULL,
  quantity INT DEFAULT 1,
  unitPrice DECIMAL(10,2) DEFAULT 0.00,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (orderId) REFERENCES orders(id) ON DELETE CASCADE,
  FOREIGN KEY (productId) REFERENCES product(id) ON DELETE CASCADE
);

CREATE TABLE discount (
  id INT AUTO_INCREMENT PRIMARY KEY,
  description VARCHAR(255),
  discount_type ENUM('Percentage', 'Fixed Amount') NOT NULL,
  discount_value DECIMAL(5,2) DEFAULT 0.00,
  start_date DATETIME,
  end_date DATETIME,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CHECK (start_date < end_date)
);

CREATE TABLE applyDiscount (
  orderId INT NOT NULL,
  discountId INT NOT NULL,
  updateAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  createAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (orderId, discountId),
  FOREIGN KEY (orderId) REFERENCES orders(id) ON DELETE CASCADE,
  FOREIGN KEY (discountId) REFERENCES discount(id) ON DELETE CASCADE
);
